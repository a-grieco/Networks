-------------------------------
README: A Simple HTTP Web Proxy
-------------------------------
AUTHORs:  Madeline Wong
          Matthew Irwin
          Adrienne Grieco
DATE:  10/29/2017
INCLUDED: parse.h
          parse.cpp
          proxy.cpp
          Makefile
          README
REFERENCED: Beej's Guide to Network Programming, 8 June 2016,
            http://beej.us/guide/bgnet/output/html/multipage/index.html

            World Wide Web Consortium (W3C), May 1996
            https://www.w3.org/Protocols/rfc1945/rfc1945

            HTTP Made Really Easy, 12 October 2012
            http://www.jmarshall.com/easy/http/

CONTENTS
--------
    1. Purpose and Design Decisions
    2. Strengths & Weaknesses
    3. Contributions
    4. Compiling and Running the Program

1. PURPOSE AND DESIGN DECISIONS
-------------------------------
This proxy is designed to intercept HTTP requests from clients, parse and verify
those requests, and (if valid) send requests to the client's desired web server,
return the web server's response to the client, and then close the connection
with the client. Upon receiving an invalid client request, the proxy will reply
to the client with a status line indicating that an internal error occurred.

CLIENT:
Connection: Will use telnet to connect to the proxy
Arguments:  Request line, optionally followed by as many headers as desired
  Request line: HTTP method to be used, only 'GET' accepted
                Absolute URI**, formatted as 'http://host[:port]/path'
                HTTP version to be used, only 'HTTP/1.0' accepted
    **  URL 'http://' prefix required
        Port number will default to '80' if not included
        Proxy is configurable to either require a path or not (see below).
  Header line(s): Formatted as 'name: value' (one header per line)
                  Name cannot have embedded spaces (i.e. 'Content-type' ok, but
                  'Content type' results in an error)
                  Header must contain a value after the ':'
  Max size:  Size of HTTP request is limited to 100,000 characters

PROXY:
Port Number:  Defaults to 10042 unless specified by user.
              A Port Number defined by the user must be between 10000 and
              13000 (inclusive) or it will be rejected.
Number Connections:  Only one client connection allowed at a time (Phase 1)
Client Request: A request line optionally followed by as many headers as desired
    First line: 'GET http://host[:port]/path HTTP/1.0'
    Additional line(s): 'name: value'

Notes on Parsing:
    get_parsed_data: the only function that needs to be called from parse.cpp in
      proxy.cpp. If the client HTTP request is valid (with a valid host), the
      function returns TRUE, assigns the 'host' and 'port', and 'data' will
      contain the web server request. If the parse is unsuccessful, the function
      returns FALSE and 'data' will contain a client error message.
    Request line from client:
      - Only 'GET' method and 'HTTP/1.0' version accepted.
      - Absolute URI requires 'http://' URL prefix
      - Port number defaults to '80' if not included
      - Proxy can be configured to require a path or not.
        * if PATH_REQUIRED set to true-> client receives an error if path absent
        * if PATH_REQUIRED set to false-> replaces path with '/' and includes
          a default 'GET / HTTP/1.0' in the request to the web server
    Header lines from client (if present):
      - name is not accepted if it contains embedded spaces
      - header is formatted so that there will be no space between name and ':'
      - duplicate 'Host:' and/or 'Connection:' headers are removed and the HTTP
        request sent to the web server defaults to 'Host: <the host provided in
        the absolute URI>' and 'Connection: close'

2. STRENGTHS AND WEAKNESSES
---------------------------
+ Checks DNS for valid host name before attempting a connection.
+ Handles partial sends and receives (all loops)
+ Parsing is robust (corrects minor inconsistencies like case and/or spacing)
  and configurable to allow absence of absolute path

- Not multithreaded, only accepts one client at a time
- Does no filtering of content received from web server

- High latency is incurred if a client enters valid web server information with
  an invalid port number. The delay occurs after the socket descriptor is built
  for the webserver when the proxy attempts to connect. The connect() function
  waits until the connection times out, then tries the next result in servinfo.
  However, the wait for each connection timeout can be minutes long.
+ To reduce latency, a PREEMPT_EXIT flag was created. When set to TRUE, and the
  port number given by the client isn't the standard '80', the proxy will stop
  attempting to make a connection if the first attempt takes more than
  MAX_SECONDS_TO_CONNECT (configurable).

3. CONTRIBUTIONS
----------------
All of us worked together to come up with the design of the program. Maddie and
Adrienne focused on parsing and validating the client request. Matt focused on
accurately rerouting the web server data to the client. Piecing the components
together and troubleshooting was a collaborative effort.

4. COMPILING AND RUNNING THE PROGRAM
------------------------------------
Use "make" to compile the proxy into an executable: proxy
Use "make clean" to remove the executable.

Start the proxy on Port Number 10042 (automatically selected) by typing into the
command line:
    ./proxy
Or start the proxy on a specified Port Number by typing into the command line:
    ./proxy <port_number>
    example:  ./proxy 10042
Note: Port number must be between 10000 and 13000 (inclusive)

After the proxy is running, in a new console (now on the client side) telnet
into the proxy by typing:
    telnet <hostname> <port>
    example:  telnet localhost 10042

Send the proxy an HTTP request from the client telnet connection.
    example:  GET http://www.yahoo.com/index.html HTTP/1.0

On the client side, a response should be received from the proxy that either
contains an error status line of 'HTTP/1.0 500 Internal Error' (directly from
the proxy) or a response from the web server containing a status line and any
resulting data.
